# для хранения кэша проксированных ответов создаётся зона с именем PROXYCACHE размером 64МБ (в 1МБ хранится ~8000 ключей)
# файлы кэша будут хранится в указанной папке, разбитой на подпапки по 1-й букве и 2-3 буквам имени файла
# элементы кэша хранятся максимум год, независимо от их свежести
# максимум может храниться 1ГБ файлов
proxy_cache_path /home/nodeuser/NodeArch/nginx_caches keys_zone=PROXYCACHE:64m levels=1:2 inactive=1y max_size=1g;
# объявляем до server, т.к. proxy_cache_path можно объявлять только на уровне директивы http

server {

  listen 7610;
  server_name nodearch.e-learning.by;

  access_log /home/nodeuser/NodeArch/nginx_logs/server7610-access.log main;
  error_log  /home/nodeuser/NodeArch/nginx_logs/server7610-error.log  error;

  # обращения к статике обслуживает сам nginx
  location ~ \.(css|jpg)$ {
    root /home/nodeuser/NodeArch/theme75/site_football2;
  }

  # обращения к html-страницам nginx будет проксировать на бэкенд на Express
  location ~ ^/page_([a-z]+)\.html$ {

    proxy_pass http://127.0.0.1:7611/getsportpage/$1;

    proxy_cache_lock on; # если на бэкенд такой УРЛ сейчас уже проксируется в рамках другого запроса, не проксировать ещё один, а дождаться ответа другого
    proxy_cache PROXYCACHE; # использовать кэш проксированных ответов с таким именем
    # proxy_cache_methods GET HEAD POST; по умолчанию GET HEAD, нам достаточно, но очень важно что если мы знаем что делаем, то можно кэшировать и ответы на POST-запросы!
    # proxy_cache_key позволяет задать ключ кэша, значение по умолчанию нас устраивает; его можно переустановить если мы скажем понимаем что от наличия GET-параметров проксированный ответ всё равно не зависит
    proxy_cache_valid 60s; # кэшировать на 1 минуту

    add_header X-Cached $upstream_cache_status; # добавляем заголовок ответа клиенту, чтобы мы видели, взят ответ из кэша или нет

    access_log /home/nodeuser/NodeArch/nginx_logs/server7610-proxy.log proxy;
  }

}
